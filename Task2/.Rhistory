select(X, DateTime, Sub_metering_1, Sub_metering_2, Sub_metering_3)
df$DateTime <- as.POSIXct(df$DateTime, "%Y/%m/%d %H:%M:%S")
df$quarter <- quarter(df$DateTime)
df$month <- month(df$DateTime)
df$week <- isoweek(df$DateTime)
#In order to show week days in English instead of Portuguese (my original locale in RStudio) I will run the following command:
Sys.setlocale("LC_TIME", "English")
df$weekdays <- weekdays(df$DateTime)
df$day <- day(df$DateTime)
df$hour <- hour(df$DateTime)
df$minute <- minute(df$DateTime)
df
house070809weekly <- filter(df, weekdays == 'Monday' & hour == 20 & minute == 1)
house070809weekly
df<-read.csv('household_power_consumption.csv')
df
df <- cbind(df,DateTime = paste(df$Date,df$Time), stringsAsFactors=FALSE)
df <- df %>%
select(X, DateTime, Sub_metering_1, Sub_metering_2, Sub_metering_3)
df$DateTime <- as.POSIXct(df$DateTime, "%Y/%m/%d %H:%M:%S")
df$quarter <- quarter(df$DateTime)
df$month <- month(df$DateTime)
df$week <- isoweek(df$DateTime)
#In order to show week days in English instead of Portuguese (my original locale in RStudio) I will run the following command:
Sys.setlocale("LC_TIME", "English")
df$weekdays <- weekdays(df$DateTime)
df$day <- day(df$DateTime)
df$hour <- hour(df$DateTime)
df$minute <- minute(df$DateTime)
df
# Create TS object with SubMeter3
tsSM3_070809weekly <- ts(house070809weekly$Sub_metering_3, frequency=52, start=c(2007,1))
library(RMySQL)
library(caret)
library(tidyverse)
library(readxl)
library(knitr)
library(ggplot2)
library(ggfortify)
install.packages(ggfortify)
## Plot sub-meter 3 with autoplot (you may need to install these packages)
libarary(ggplot2)
autoplot(tsSM3_070809weekly)
tsSM3_070809weekly <- ts(house070809weekly$Sub_metering_3, frequency=52, start=c(2007,1))
## Plot sub-meter 3 with autoplot (you may need to install these packages)
autoplot(tsSM3_070809weekly)
install.packages('ggfortify')
library(ggfortify)
## Plot sub-meter 3 with autoplot (you may need to install these packages)
autoplot(tsSM3_070809weekly)
autoplot(tsSM3_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 3")
plot.ts(tsSM3_070809weekly)
tsSM3_070809weekly <- ts(house070809weekly$Sub_metering_2, frequency=52, start=c(2007,1))
tsSM2_070809weekly <- ts(house070809weekly$Sub_metering_2, frequency=52, start=c(2007,1))
autoplot(tsSM2_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 2")
plot.ts(tsSM2_070809weekly)
tsSM1_070809weekly <- ts(house070809weekly$Sub_metering_1, frequency=52, start=c(2007,1))
autoplot(tsSM1_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 3")
plot.ts(tsSM1_070809weekly)
house070809weekly <- filter(df, weekdays == 'Monday' & hour == 20 & minute == 1)
tsSM2_070809weekly <- ts(house070809weekly$Sub_metering_2, frequency=52, start=c(2007,1))
autoplot(tsSM2_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 3")
plot.ts(tsSM2_070809weekly)
house070809weekly <- filter(df, weekdays == 'Monday' & hour == 18 & minute == 1)
tsSM2_070809weekly <- ts(house070809weekly$Sub_metering_2, frequency=52, start=c(2007,1))
autoplot(tsSM2_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 3")
autoplot(tsSM2_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 2")
house070809weekly <- filter(df, weekdays == 'Monday' & hour == 18 & minute == 1)
tsSM1_070809weekly <- ts(house070809weekly$Sub_metering_1, frequency=52, start=c(2007,1))
house070809weekly <- filter(df, weekdays == 'Monday' & hour == 18 & minute == 1)
tsSM1_070809weekly <- ts(house070809weekly$Sub_metering_1, frequency=52, start=c(2007,1))
```{r - Plot sub-meter 3 with autoplot - add labels, color}
autoplot(tsSM1_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 1 / Kitchen")
autoplot(tsSM1_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 1 / Kitchen")
```{r - Plot sub-meter 3 with plot.ts}
plot.ts(tsSM1_070809weekly)
autoplot(tsSM3_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 3 / Water Heater & AC")
plot.ts(tsSM3_070809weekly)
house070809weekly <- filter(df, weekdays == 'Monday' & hour == 18 & minute == 1)
tsSM2_070809weekly <- ts(house070809weekly$Sub_metering_2, frequency=52, start=c(2007,1))
autoplot(tsSM2_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 2 / Laundry")
plot.ts(tsSM2_070809weekly)
house070809weekly <- filter(df, weekdays == 'Monday' & hour == 18 & minute == 1)
tsSM1_070809weekly <- ts(house070809weekly$Sub_metering_1, frequency=52, start=c(2007,1))
autoplot(tsSM1_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 1 / Kitchen")
plot.ts(tsSM1_070809weekly)
house070809weekly <- filter(df, weekdays == 'Monday' & hour == 18 & minute == 1)
tsSM2_070809weekly <- ts(house070809weekly$Sub_metering_2, frequency=365, start=c(2007,1))
autoplot(tsSM2_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 2 / Laundry")
tsSM2_070809weekly
house070809weekly <- filter(df, weekdays == 'Monday' & hour == 18 & minute == 1)
tsSM2_070809weekly <- ts(house070809weekly$Sub_metering_2, frequency=52, start=c(2007,1))
tsSM2_070809weekly
house070809weekly <- filter(df, hour == 18 & minute == 1)
tsSM2_070809weekly <- ts(house070809weekly$Sub_metering_2, frequency=365, start=c(2007,1))
tsSM2_070809weekly
autoplot(tsSM2_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 2 / Laundry")
house070809weekly <- filter(df, hour == 18 & minute == 1)
tsSM1_070809weekly <- ts(house070809weekly$Sub_metering_1, frequency=365, start=c(2007,1))
autoplot(tsSM1_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 1 / Kitchen")
df <- cbind(df,DateTime = paste(df$Date,df$Time), stringsAsFactors=FALSE)
df<-read.csv('household_power_consumption.csv')
df
df <- cbind(df,DateTime = paste(df$Date,df$Time), stringsAsFactors=FALSE)
df <- df %>%
select(X, DateTime, Sub_metering_1, Sub_metering_2, Sub_metering_3)
df$DateTime <- as.POSIXct(df$DateTime, "%Y/%m/%d %H:%M:%S")
df$quarter <- quarter(df$DateTime)
df$month <- month(df$DateTime)
df$week <- isoweek(df$DateTime)
#In order to show week days in English instead of Portuguese (my original locale in RStudio) I will run the following command:
Sys.setlocale("LC_TIME", "English")
df$weekdays <- weekdays(df$DateTime)
df$day <- day(df$DateTime)
df$hour <- hour(df$DateTime)
df$minute <- minute(df$DateTime)
attr(df$DateTime, "tzone") <- "Europe/Paris"
df
house070809weekly <- filter(df, weekdays == 'Monday' & hour == 20 & minute == 1)
tsSM3_070809weekly <- ts(house070809weekly$Sub_metering_3, frequency=52, start=c(2007,1))
autoplot(tsSM3_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 3 / Water Heater & AC")
plot.ts(tsSM3_070809weekly)
house070809weekly <- filter(df, hour == 18 & minute == 1)
tsSM2_070809weekly <- ts(house070809weekly$Sub_metering_2, frequency=365, start=c(2007,1))
tsSM2_070809weekly
house070809weekly <- filter(df, hour == 18 & minute == 1)
tsSM2_070809weekly <- ts(house070809weekly$Sub_metering_2, frequency=365, start=c(2007,1))
autoplot(tsSM2_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 2 / Laundry")
plot.ts(tsSM2_070809weekly)
house070809weekly <- filter(df, hour == 18 & minute == 1)
tsSM1_070809weekly <- ts(house070809weekly$Sub_metering_1, frequency=365, start=c(2007,1))
autoplot(tsSM1_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 1 / Kitchen")
plot.ts(tsSM1_070809weekly)
##
library(forecast)
install.packages('forecast')
library(forecast)
```{r - Apply time series linear regression to the sub-meter 3 ts object and use summary to obtain R2 and RMSE from the model you built}
fitSM3 <- tslm(tsSM3_070809weekly ~ trend + season)
summary(fitSM3)
forecastfitSM3 <- forecast(fitSM3, h=20)
plot(forecastfitSM3)
forecastfitSM3c <- forecast(fitSM3, h=20, level=c(80,90))
plot(forecastfitSM3c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
fitSM3 <- tslm(tsSM3_070809weekly ~ trend + season)
summary(fitSM3)
forecastfitSM3 <- forecast(fitSM3, h=20)
plot(forecastfitSM3)
forecastfitSM3c <- forecast(fitSM3, h=20, level=c(80,90))
plot(forecastfitSM3c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
fitSM2 <- tslm(tsSM2_070809daily ~ trend + season)
fitSM2 <- tslm(tsSM2_070809daily ~ trend + season)
df<-read.csv('household_power_consumption.csv')
df
df <- cbind(df,DateTime = paste(df$Date,df$Time), stringsAsFactors=FALSE)
df <- df %>%
select(X, DateTime, Sub_metering_1, Sub_metering_2, Sub_metering_3)
df$DateTime <- as.POSIXct(df$DateTime, "%Y/%m/%d %H:%M:%S")
df$quarter <- quarter(df$DateTime)
df$month <- month(df$DateTime)
df$week <- isoweek(df$DateTime)
#In order to show week days in English instead of Portuguese (my original locale in RStudio) I will run the following command:
Sys.setlocale("LC_TIME", "English")
df$weekdays <- weekdays(df$DateTime)
df$day <- day(df$DateTime)
df$hour <- hour(df$DateTime)
df$minute <- minute(df$DateTime)
attr(df$DateTime, "tzone") <- "Europe/Paris"
df
house070809weekly <- filter(df, weekdays == 'Monday' & hour == 20 & minute == 1)
tsSM3_070809weekly <- ts(house070809weekly$Sub_metering_3, frequency=52, start=c(2007,1))
autoplot(tsSM3_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 3 / Water Heater & AC")
plot.ts(tsSM3_070809weekly)
house070809daily <- filter(df, hour == 18 & minute == 1)
tsSM2_070809daily <- ts(house070809daily$Sub_metering_2, frequency=365, start=c(2007,1))
autoplot(tsSM2_070809daily, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 2 / Laundry")
plot.ts(tsSM2_070809daily)
house070809daily <- filter(df, hour == 18 & minute == 1)
tsSM1_070809daily <- ts(house070809daily$Sub_metering_1, frequency=365, start=c(2007,1))
autoplot(tsSM1_070809daily, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 1 / Kitchen")
house070809daily <- filter(df, hour == 18 & minute == 1)
tsSM1_070809daily <- ts(house070809daily$Sub_metering_1, frequency=365, start=c(2007,1))
autoplot(tsSM1_070809daily, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 1 / Kitchen")
plot.ts(tsSM1_070809daily)
plot.ts(tsSM1_070809daily)
*Forecasting time series*
**Forecasting sub-meter 3:**
```{r - Apply time series linear regression to the sub-meter 3 ts object and use summary to obtain R2 and RMSE from the model you built}
fitSM3 <- tslm(tsSM3_070809weekly ~ trend + season)
summary(fitSM3)
```
```{r - Create and plot the forecast for sub-meter 3. Forecast ahead 20 time periods }
fitSM3 <- tslm(tsSM3_070809weekly ~ trend + season)
summary(fitSM3)
forecastfitSM3 <- forecast(fitSM3, h=20)
plot(forecastfitSM3)
forecastfitSM3c <- forecast(fitSM3, h=20, level=c(80,90))
plot(forecastfitSM3c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
fitSM2 <- tslm(tsSM2_070809daily ~ trend + season)
summary(fitSM2)
forecastfitSM2 <- forecast(fitSM2, h=20)
plot(forecastfitSM2)
forecastfitSM2c <- forecast(fitSM2, h=20, level=c(80,90))
plot(forecastfitSM2c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
forecastfitSM2c <- forecast(fitSM2, h=200, level=c(80,90))
plot(forecastfitSM2c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
forecastfitSM2c <- forecast(fitSM2, h=50, level=c(80,90))
plot(forecastfitSM2c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
```{r - Create and plot the forecast for sub-meter 2. Forecast ahead 20 time periods }
plot(forecastfitSM2)
forecastfitSM2 <- forecast(fitSM2, h=50)
plot(forecastfitSM2)
fitSM1 <- tslm(tsSM1_070809daily ~ trend + season)
summary(fitSM1)
forecastfitSM1 <- forecast(fitSM1, h=20)
plot(forecastfitSM1)
forecastfitSM1 <- forecast(fitSM1, h=50)
plot(forecastfitSM1)
forecastfitSM2c <- forecast(fitSM1, h=20, level=c(80,90))
plot(forecastfitSM1c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
forecastfitSM1c <- forecast(fitSM1, h=50, level=c(80,90))
plot(forecastfitSM1c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
forecastfitSM1c <- forecast(fitSM1, h=50, level=c(90,100))
plot(forecastfitSM1c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
forecastfitSM1c <- forecast(fitSM1, h=50, level=c(90,100))
forecastfitSM1c <- forecast(fitSM1, h=50, level=c(90,99))
plot(forecastfitSM1c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
8
8
forecastfitSM1c <- forecast(fitSM1, h=50, level=c(80,90))
plot(forecastfitSM1c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
summary(fitSM1).RMSE
summary(fitSM1)$RMSE
summary(fitSM1)$r.squared
RMSE(fitSM1)
summary(fitSM1)#$r.squared
summary(fitSM1)$r.squared
summary(fitSM1)$RMSE
summary(fitSM1)$r.squared
sqrt(mean(fitSM1$residuals^2))
Results_Models <- data.frame(
category=c("Kitchen", "Laundry", "WaterHeater/AC"),
RMSE = c(sqrt(mean(fitSM1$residuals^2)), sqrt(mean(fitSM2$residuals^2)), sqrt(mean(fitSM3$residuals^2)))
RSquared=c(summary(fitSM1)$r.squared, summary(fitSM2)$r.squared, summary(fitSM3)$r.squared)
Results_Models <- data.frame(
category=c("Kitchen", "Laundry", "WaterHeater/AC"),
RMSE = c(sqrt(mean(fitSM1$residuals^2)), sqrt(mean(fitSM2$residuals^2)), sqrt(mean(fitSM3$residuals^2))),
RSquared=c(summary(fitSM1)$r.squared, summary(fitSM2)$r.squared, summary(fitSM3)$r.squared)
)
Results_Models
Results_Models <- data.frame(
category=c("Kitchen", "Laundry", "WaterHeater/AC"),
RMSE = c(sqrt(mean(fitSM1$residuals^2)), sqrt(mean(fitSM2$residuals^2)), sqrt(mean(fitSM3$residuals^2))),
RSquared=c(summary(fitSM1)$r.squared, summary(fitSM2)$r.squared, summary(fitSM3)$r.squared)
pvalue = c(summary(fitSM1)$r.squared, summary(fitSM2)$r.squared, summary(fitSM3)$pvalue)
summary(fitSM1)
summary(fitSM1)$p.value
summary(fitSM1)$coefficients[,4]
summary(fitSM1)#$coefficients[,4]
summary(fitSM1)$p-value
summary(fitSM1)$p_value
summary(fitSM1)$coefficients[2,4]
summary(fitSM1)#$p_value
summary(fitSM1)$coefficients#[2,4]
summary(fitSM1)#$p_value
df<-read.csv('household_power_consumption.csv')
df
df <- cbind(df,DateTime = paste(df$Date,df$Time), stringsAsFactors=FALSE)
df <- df %>%
select(X, DateTime, Sub_metering_1, Sub_metering_2, Sub_metering_3)
df$DateTime <- as.POSIXct(df$DateTime, "%Y/%m/%d %H:%M:%S")
df$quarter <- quarter(df$DateTime)
df$month <- month(df$DateTime)
df$week <- isoweek(df$DateTime)
#In order to show week days in English instead of Portuguese (my original locale in RStudio) I will run the following command:
Sys.setlocale("LC_TIME", "English")
df$weekdays <- weekdays(df$DateTime)
df$day <- day(df$DateTime)
df$hour <- hour(df$DateTime)
df$minute <- minute(df$DateTime)
attr(df$DateTime, "tzone") <- "Europe/Paris"
df
house070809weekly <- filter(df, weekdays == 'Monday' & hour == 20 & minute == 1)
tsSM3_070809weekly <- ts(house070809weekly$Sub_metering_3, frequency=52, start=c(2007,1))
autoplot(tsSM3_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 3 / Water Heater & AC")
plot.ts(tsSM3_070809weekly)
house070809daily <- filter(df, hour == 18 & minute == 1)
tsSM2_070809daily <- ts(house070809daily$Sub_metering_2, frequency=365, start=c(2007,1))
autoplot(tsSM2_070809daily, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 2 / Laundry")
plot.ts(tsSM2_070809daily)
house070809daily <- filter(df, hour == 18 & minute == 1)
tsSM1_070809daily <- ts(house070809daily$Sub_metering_1, frequency=365, start=c(2007,1))
autoplot(tsSM1_070809daily, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 1 / Kitchen")
plot.ts(tsSM1_070809daily)
fitSM3 <- tslm(tsSM3_070809weekly ~ trend + season)
summary(fitSM3)
forecastfitSM3 <- forecast(fitSM3, h=20)
plot(forecastfitSM3)
forecastfitSM3c <- forecast(fitSM3, h=20, level=c(80,90))
plot(forecastfitSM3c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
fitSM2 <- tslm(tsSM2_070809daily ~ trend + season)
summary(fitSM2)
house070809daily <- filter(df, hour == 12 & minute == 1)
tsSM1_070809daily <- ts(house070809daily$Sub_metering_1, frequency=365, start=c(2007,1))
autoplot(tsSM1_070809daily, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 1 / Kitchen")
plot.ts(tsSM1_070809daily)
fitSM1 <- tslm(tsSM1_070809daily ~ trend + season)
summary(fitSM1)
house070809daily <- filter(df, hour == 10 & minute == 1)
tsSM1_070809daily <- ts(house070809daily$Sub_metering_1, frequency=182, start=c(2007,1))
autoplot(tsSM1_070809daily, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 1 / Kitchen")
plot.ts(tsSM1_070809daily)
fitSM1 <- tslm(tsSM1_070809daily ~ trend + season)
summary(fitSM1)
house070809daily <- filter(df, hour == 10 & minute == 1)
tsSM1_070809daily <- ts(house070809daily$Sub_metering_1, frequency=365, start=c(2007,1))
autoplot(tsSM1_070809daily, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 1 / Kitchen")
plot.ts(tsSM1_070809daily)
fitSM1 <- tslm(tsSM1_070809daily ~ trend + season)
summary(fitSM1)
house070809daily <- filter(df, hour == 12 & minute == 1)
tsSM1_070809daily <- ts(house070809daily$Sub_metering_1, frequency=365, start=c(2007,1))
autoplot(tsSM1_070809daily, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 1 / Kitchen")
house070809daily <- filter(df, hour == 12 & minute == 1)
tsSM2_070809daily <- ts(house070809daily$Sub_metering_2, frequency=365, start=c(2007,1))
autoplot(tsSM2_070809daily, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 2 / Laundry")
house070809daily <- filter(df, hour == 12 & minute == 1)
tsSM1_070809daily <- ts(house070809daily$Sub_metering_1, frequency=365, start=c(2007,1))
autoplot(tsSM1_070809daily, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 1 / Kitchen")
plot.ts(tsSM1_070809daily)
fitSM3 <- tslm(tsSM3_070809weekly ~ trend + season)
summary(fitSM3)
forecastfitSM3 <- forecast(fitSM3, h=20)
plot(forecastfitSM3)
forecastfitSM3c <- forecast(fitSM3, h=20, level=c(80,90))
plot(forecastfitSM3c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
fitSM2 <- tslm(tsSM2_070809daily ~ trend + season)
summary(fitSM2)
house070809daily <- filter(df, hour == 15 & minute == 1)
tsSM2_070809daily <- ts(house070809daily$Sub_metering_2, frequency=365, start=c(2007,1))
house070809daily <- filter(df, hour == 15 & minute == 1)
tsSM2_070809daily <- ts(house070809daily$Sub_metering_2, frequency=365, start=c(2007,1))
fitSM2 <- tslm(tsSM2_070809daily ~ trend + season)
summary(fitSM2)
house070809daily <- filter(df, hour == 15 & minute == 1)
tsSM2_070809daily <- ts(house070809daily$Sub_metering_2, frequency=365, start=c(2007,1))
autoplot(tsSM2_070809daily, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 2 / Laundry")
plot.ts(tsSM2_070809daily)
house070809daily <- filter(df, hour == 12 & minute == 1)
tsSM1_070809daily <- ts(house070809daily$Sub_metering_1, frequency=365, start=c(2007,1))
autoplot(tsSM1_070809daily, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 1 / Kitchen")
plot.ts(tsSM1_070809daily)
fitSM3 <- tslm(tsSM3_070809weekly ~ trend + season)
summary(fitSM3)
forecastfitSM3 <- forecast(fitSM3, h=20)
plot(forecastfitSM3)
forecastfitSM3c <- forecast(fitSM3, h=20, level=c(80,90))
plot(forecastfitSM3c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
fitSM2 <- tslm(tsSM2_070809daily ~ trend + season)
summary(fitSM2)
forecastfitSM2 <- forecast(fitSM2, h=50)
plot(forecastfitSM2)
forecastfitSM2c <- forecast(fitSM2, h=50, level=c(80,90))
plot(forecastfitSM2c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
fitSM1 <- tslm(tsSM1_070809daily ~ trend + season)
summary(fitSM1)
forecastfitSM1 <- forecast(fitSM1, h=50)
plot(forecastfitSM1)
forecastfitSM1c <- forecast(fitSM1, h=50, level=c(80,90))
plot(forecastfitSM1c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
Results_Models <- data.frame(
category=c("Kitchen", "Laundry", "WaterHeater/AC"),
RMSE = c(sqrt(mean(fitSM1$residuals^2)), sqrt(mean(fitSM2$residuals^2)), sqrt(mean(fitSM3$residuals^2))),
RSquared=c(summary(fitSM1)$r.squared, summary(fitSM2)$r.squared, summary(fitSM3)$r.squared)
pvalue = c(summary(fitSM1)$r.squared, summary(fitSM2)$r.squared, summary(fitSM3)$pvalue)
Results_Models <- data.frame(
category=c("Kitchen", "Laundry", "WaterHeater/AC"),
RMSE = c(sqrt(mean(fitSM1$residuals^2)), sqrt(mean(fitSM2$residuals^2)), sqrt(mean(fitSM3$residuals^2))),
RSquared=c(summary(fitSM1)$r.squared, summary(fitSM2)$r.squared, summary(fitSM3)$r.squared)
)
Results_Models
results <- resamples(list(SVM = fitSM1, GBM=fitSM2, RF=fitSM3))
fitSM1
results <- resamples(list(SVM = fitSM1, GBM=fitSM2, RF=fitSM3))
results <- resamples(list(SM1 = fitSM1, SM2=fitSM2, SM3=fitSM3))
list(SM1 = fitSM1, SM2=fitSM2, SM3=fitSM3)
resamples(list(SM1 = fitSM1, SM2=fitSM2, SM3=fitSM3))
summary(results)
results <- resamples(list(SM1 = fitSM1, SM2=fitSM2, SM3=fitSM3))
bwplot(Results_Models, metric = 'RMSE')
results <- resamples(list(SM1 = fitSM1, SM2=fitSM2, SM3=fitSM3))
resamples(list(SM1 = fitSM1, SM2=fitSM2, SM3=fitSM3))
resamples(list(SM1 = fitSM1, SM2=fitSM2, SM3=fitSM3))
resamples(list(SM1 = fitSM1, SM2=fitSM2, SM3=fitSM3))
results <- list(SM1 = fitSM1, SM2=fitSM2, SM3=fitSM3)
summary(results)
bwplot(results, metric = 'MAE')
results <- list(SM1 = fitSM1, SM2=fitSM2, SM3=fitSM3)
summary(results)
results <- c(SM1 = fitSM1, SM2=fitSM2, SM3=fitSM3)
summary(results)
bwplot(results, metric = 'MAE')
bwplot(results, metric = 'RMSE')
bwplot(results, metric = 'Rsquared')
Results_Models <- data.frame(
category=c("Kitchen", "Laundry", "WaterHeater/AC"),
RMSE = c(sqrt(mean(fitSM1$residuals^2)), sqrt(mean(fitSM2$residuals^2)), sqrt(mean(fitSM3$residuals^2))),
RSquared=c(summary(fitSM1)$r.squared, summary(fitSM2)$r.squared, summary(fitSM3)$r.squared)
)
Results_Models
bwplot(Results_Models, metric = 'RMSE')
Results_Models
```{r - Decompose Sub-meter 3 into trend, seasonal and remainder}
## Plot decomposed sub-meter 3
plot(components070809SM3weekly)
components070809SM3weekly <- decompose(tsSM3_070809weekly)
## Plot decomposed sub-meter 3
plot(components070809SM3weekly)
## Check summary statistics for decomposed sub-meter 3
summary(components070809SM3weekly)
components070809SM2daily <- decompose(tsSM2_070809daily)
## Plot decomposed sub-meter 3
plot(components070809SM2daily)
## Check summary statistics for decomposed sub-meter 3
summary(components070809SM2daily)
components070809SM1daily <- decompose(tsSM1_070809daily)
## Plot decomposed sub-meter 3
plot(components070809SM1daily)
## Check summary statistics for decomposed sub-meter 3
summary(components070809SM1daily)
components070809SM2daily <- decompose(tsSM2_070809daily)
## Plot decomposed sub-meter 3
plot(components070809SM2daily)
## Check summary statistics for decomposed sub-meter 3
summary(components070809SM2daily)
components070809SM1daily <- decompose(tsSM1_070809daily)
## Plot decomposed sub-meter 3
plot(components070809SM1daily)
## Check summary statistics for decomposed sub-meter 3
summary(components070809SM1daily)
plot(components070809SM2daily$trend, components070809SM1daily$trend )
plot(components070809SM2daily$trend, components070809SM1daily$trend )
plot(components070809SM3weekly$trend, components070809SM1daily$trend )
components070809SM1daily
components070809SM1daily$trend
plot(c(components070809SM1daily$trend))
plot(c(components070809SM1daily$trend))
plot(c(components070809SM1daily$trend,components070809SM1daily$trend))
plot(c(components070809SM1daily$trend,components070809SM2daily$trend))
plot(components070809SM1daily$trend, type ='l',col="red" )
par(new=TRUE)
plot(components070809SM1daily$trend, type ='l',col="red" )
plot(components070809SM2daily$trend, type ='l',col="red" )
plot(components070809SM2daily$trend, type ='l',col="green" )
plot(components070809SM1daily$trend, type ='l',col="red" )
par(new=TRUE)
plot(components070809SM2daily$trend, type ='l',col="green" )
plot(components070809SMweekly$trend, type ='l',col="green" )
plot(components070809SM1daily$trend, type ='l',col="red" )
par(new=TRUE)
plot(components070809SM2daily$trend, type ='l',col="green" )
par(new=TRUE)
plot(components070809SM3weekly$trend, type ='l',col="green" )
plot(components070809SM3weekly$trend, type ='l',col="b"lue )
plot(components070809SM1daily$trend, type ='l',col="red" )
par(new=TRUE)
plot(components070809SM2daily$trend, type ='l',col="green" )
par(new=TRUE)
plot(components070809SM3weekly$trend, type ='l',col="blue" )
g <- ggplot(components070809SM1daily$trend, aes(x))
g
components070809SM1daily
plot(components070809SM1daily$trend, type ='l',col="red" )
par(new=FALSE)
plot(components070809SM2daily$trend, type ='l',col="green" )
par(new=FALSE)
plot(components070809SM3weekly$trend, type ='l',col="blue" )
par(mfrow=c(3,1))
plot(components070809SM1daily$trend, type ='l',col="red" )
plot(components070809SM2daily$trend, type ='l',col="green" )
plot(components070809SM3weekly$trend, type ='l',col="blue" )
tsSM3_070809Adjusted <- tsSM3_070809weekly - components070809SM3weekly$seasonal
autoplot(tsSM3_070809Adjusted)
plot(decompose(tsSM3_070809Adjusted))
tsSM2_070809Adjusted <- tsSM2_070809daily - components070809SM2daily$seasonal
autoplot(tsSM2_070809Adjusted)
plot(decompose(tsSM2_070809Adjusted))
tsSM1_070809Adjusted <- tsSM1_070809daily - components070809SM1daily$seasonal
autoplot(tsSM1_070809Adjusted)
plot(decompose(tsSM1_070809Adjusted))
tsSM3_HW070809 <- HoltWinters(tsSM3_070809Adjusted, beta=FALSE, gamma=FALSE)
plot(tsSM3_HW070809, ylim = c(0, 25))
tsSM2_HW070809 <- HoltWinters(tsSM2_070809Adjusted, beta=FALSE, gamma=FALSE)
plot(tsSM2_HW070809, ylim = c(0, 25))
tsSM2_HW070809 <- HoltWinters(tsSM2_070809Adjusted, beta=FALSE, gamma=FALSE)
plot(tsSM2_HW070809, ylim = c(0, 30))
tsSM1_HW070809 <- HoltWinters(tsSM1_070809Adjusted, beta=FALSE, gamma=FALSE)
plot(tsSM1_HW070809, ylim = c(0, 25))
tsSM3_HW070809for <- forecast(tsSM3_HW070809, h=25)
plot(tsSM3_HW070809for, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time - Sub-meter 3")
tsSM1_HW070809 <- HoltWinters(tsSM1_070809Adjusted, beta=FALSE, gamma=FALSE)
plot(tsSM1_HW070809, ylim = c(0, 25))
tsSM3_HW070809forC <- forecast(tsSM3_HW070809, h=25, level=c(10,25))
plot(tsSM3_HW070809forC, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time - Sub-meter 3", start(2010))
tsSM2_HW070809for <- forecast(tsSM2_HW070809, h=25)
plot(tsSM2_HW070809for, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time - Sub-meter 2")
tsSM2_HW070809forC <- forecast(tsSM2_HW070809, h=25, level=c(10,25))
plot(tsSM2_HW070809forC, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time - Sub-meter 2", start(2010))
tsSM1_HW070809for <- forecast(tsSM1_HW070809, h=25)
plot(tsSM1_HW070809for, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time - Sub-meter 1")
tsSM1_HW070809forC <- forecast(tsSM1_HW070809, h=25, level=c(10,25))
plot(tsSM1_HW070809forC, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time - Sub-meter 1", start(2010))
