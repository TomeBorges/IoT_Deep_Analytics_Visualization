plot_ly(houseDay, x = ~houseDay$DateTime, y = ~houseDay$Sub_metering_1, type = 'scatter', mode = 'lines')
plot_ly(houseDay, x = ~houseDay$DateTime, y = ~houseDay$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~houseDay$Sub_metering_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = ~houseDay$Sub_metering_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Consumption January 9th, 2008",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (watt-hours)"))
# Refilter the data with less granularity (only see one measurement every 10 minutes)
houseDay10 <- filter(df, year == 2008 & month == 1 & day == 9 & (minute == 0 | minute == 10 | minute == 20 | minute == 30 | minute == 40 | minute == 50))
houseDay10
plot_ly(houseDay10, x = ~houseDay10$DateTime, y = ~houseDay10$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~houseDay10$Sub_metering_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = ~houseDay10$Sub_metering_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Consumption January 9th, 2008",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (watt-hours)"))
# load library
library(ggplot2)
# Create test data.
data <- data.frame(
category=c("Kitchen", "Laundry", "WaterHeater/AC"),
count=c(sum(houseDay10$Sub_metering_1), sum(houseDay10$Sub_metering_2), sum(houseDay10$Sub_metering_3))
)
# Compute percentages
data$fraction <- data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- c(0,1/5,1/2)#(data$ymax + data$ymin) / 2
# Compute a good label
data$label <- paste0(data$category, " value: ", data$count, "W/h \n(",round(data$fraction,2)*100,"%)")
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
# Refilter the data with less granularity (only see one measurement every hour)
houseWeek2 <- filter(df, year == 2008 & week == 2 & (minute == 0))
houseWeek2
plot_ly(houseWeek2, x = ~houseWeek2$DateTime, y = ~houseWeek2$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~houseWeek2$Sub_metering_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = ~houseWeek2$Sub_metering_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Consumption on the second week of 2008 (January 7th until the 13th)",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (watt-hours)"))
# load library
library(ggplot2)
# Create test data.
data <- data.frame(
category=c("Kitchen", "Laundry", "WaterHeater/AC"),
count=c(sum(houseWeek2$Sub_metering_1), sum(houseWeek2$Sub_metering_2), sum(houseWeek2$Sub_metering_3))
)
# Compute percentages
data$fraction <- data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- c(0,1/6,1/2)#(data$ymax + data$ymin) / 2
# Compute a good label
data$label <- paste0(data$category, " value: ", data$count, "W/h \n(",round(data$fraction,2)*100,"%)")
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
data
# Refilter the data with less granularity (only see one measurement every hour)
houseYear08 <- filter(df, year == 2008 & (hour == 0 & minute == 0))
houseYear08
plot_ly(houseYear08, x = ~houseYear08$DateTime, y = ~houseYear08$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~houseYear08$Sub_metering_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = ~houseYear08$Sub_metering_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Consumption at midnightof everyday of 2008",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (watt-hours)"))
# Refilter the data with less granularity (only see one measurement every day)
houseyear08_2 <- aggregate(cbind(Sub_metering_1,Sub_metering_2,Sub_metering_3)~day+month+year, FUN=sum, data=filter(df, year == 2008), na.rm=TRUE)
houseyear08_2
houseyear08_2 <- cbind(houseyear08_2,DateTime = paste(houseyear08_2$year,houseyear08$month,houseyear08$day), stringsAsFactors=FALSE)
houseyear08_2 <- cbind(houseyear08_2,DateTime = paste(houseyear08_2$year,houseyear08$month,houseyear08_2$day), stringsAsFactors=FALSE)
houseyear08_2 <- cbind(houseyear08_2,DateTime = paste(houseyear08_2$year,houseyear08_2$month,houseyear08_2$day), stringsAsFactors=FALSE)
houseyear08_2$DateTime <- as.POSIXct(as.Date(houseyear08_2$DateTime, "%Y %m %d"))
houseyear08_2
plot_ly(houseyear08_2, x = ~houseyear08_2$DateTime, y = ~houseyear08_2$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~houseyear08_2$Sub_metering_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = ~houseyear08_2$Sub_metering_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Total daily Power Consumption throughout the year of 2008",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (watt-hours)"))
# load library
library(ggplot2)
# Create test data.
data <- data.frame(
category=c("Kitchen", "Laundry", "WaterHeater/AC"),
count=c(sum(houseyear08_2$Sub_metering_1), sum(houseyear08_2$Sub_metering_2), sum(houseyear08_2$Sub_metering_3))
)
# Compute percentages
data$fraction <- data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- c(0,1/6,1/2)#(data$ymax + data$ymin) / 2
# Compute a good label
data$label <- paste0(data$category, " value: ", data$count, "W/h \n(",round(data$fraction,2)*100,"%)")
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
df<-read.csv('household_power_consumption.csv')
df
df <- cbind(df,DateTime = paste(df$Date,df$Time), stringsAsFactors=FALSE)
df <- df %>%
select(X, DateTime, Sub_metering_1, Sub_metering_2, Sub_metering_3)
df$DateTime <- as.POSIXct(df$DateTime, "%Y/%m/%d %H:%M:%S")
df$quarter <- quarter(df$DateTime)
df$month <- month(df$DateTime)
df$week <- isoweek(df$DateTime)
#In order to show week days in English instead of Portuguese (my original locale in RStudio) I will run the following command:
Sys.setlocale("LC_TIME", "English")
df$weekdays <- weekdays(df$DateTime)
df$day <- day(df$DateTime)
df$hour <- hour(df$DateTime)
df$minute <- minute(df$DateTime)
attr(df$DateTime, "tzone") <- "Europe/Paris"
df
house070809weekly <- filter(df, weekdays == 'Monday' & hour == 20 & minute == 1)
tsSM3_070809weekly <- ts(house070809weekly$Sub_metering_3, frequency=52, start=c(2007,1))
autoplot(tsSM3_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 3 / Water Heater & AC")
plot.ts(tsSM3_070809weekly)
house070809daily <- filter(df, hour == 15 & minute == 1)
tsSM2_070809daily <- ts(house070809daily$Sub_metering_2, frequency=365, start=c(2007,1))
autoplot(tsSM2_070809daily, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 2 / Laundry")
plot.ts(tsSM2_070809daily)
house070809daily <- filter(df, hour == 12 & minute == 1)
tsSM1_070809daily <- ts(house070809daily$Sub_metering_1, frequency=365, start=c(2007,1))
autoplot(tsSM1_070809daily, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 1 / Kitchen")
plot.ts(tsSM1_070809daily)
fitSM3 <- tslm(tsSM3_070809weekly ~ trend + season)
summary(fitSM3)
forecastfitSM3 <- forecast(fitSM3, h=20)
plot(forecastfitSM3)
forecastfitSM3c <- forecast(fitSM3, h=20, level=c(80,90))
plot(forecastfitSM3c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
fitSM2 <- tslm(tsSM2_070809daily ~ trend + season)
summary(fitSM2)
forecastfitSM2 <- forecast(fitSM2, h=50)
plot(forecastfitSM2)
forecastfitSM2c <- forecast(fitSM2, h=50, level=c(80,90))
plot(forecastfitSM2c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
fitSM1 <- tslm(tsSM1_070809daily ~ trend + season)
summary(fitSM1)
forecastfitSM1 <- forecast(fitSM1, h=50)
plot(forecastfitSM1)
forecastfitSM1c <- forecast(fitSM1, h=50, level=c(80,90))
plot(forecastfitSM1c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
Results_Models <- data.frame(
category=c("Sub-meter1 / Kitchen", "Sub-meter2 / Laundry", "Sub-meter 3 / WaterHeater/AC"),
RMSE = c(sqrt(mean(fitSM1$residuals^2)), sqrt(mean(fitSM2$residuals^2)), sqrt(mean(fitSM3$residuals^2))),
RSquared=c(summary(fitSM1)$r.squared, summary(fitSM2)$r.squared, summary(fitSM3)$r.squared)
)
Results_Models
# Horizontal version
ggplot(Results_Models, aes(x=x, y=y)) +
geom_segment( aes(x=x, xend=x, y=0, yend=y), color="skyblue") +
geom_point( color="blue", size=4, alpha=0.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
category
# Horizontal version
ggplot(Results_Models, aes(x=category, y=RMSE)) +
geom_segment( aes(x=x, xend=x, y=0, yend=y), color="skyblue") +
geom_point( color="blue", size=4, alpha=0.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
# Horizontal version
ggplot(Results_Models, aes(x=category, y=RMSE)) +
geom_segment( aes(x=category, xend=category, y=0, yend=RMSE), color="skyblue") +
geom_point( color="blue", size=4, alpha=0.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
# Horizontal version
ggplot(Results_Models, aes(x=category, y=RMSE)) +
geom_segment( aes(x=category, xend=category, y=4, yend=RMSE), color="skyblue") +
geom_point( color="blue", size=4, alpha=0.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
# Horizontal version
ggplot(Results_Models, aes(x=category, y=RMSE)) +
geom_segment( aes(x=category, xend=category, y=4, yend=RMSE), color="skyblue") +
geom_point( color="blue", size=4, alpha=0.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
ggplot(Results_Models, aes(x=category, y=RSquared)) +
geom_segment( aes(x=category, xend=category, y=4, yend=RMSE), color="skyblue") +
geom_point( color="blue", size=4, alpha=0.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
# Horizontal version
ggplot(Results_Models, aes(x=category, y=RMSE)) +
geom_segment( aes(x=category, xend=category, y=4, yend=RMSE), color="skyblue") +
geom_point( color="blue", size=4, alpha=0.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
ggplot(Results_Models, aes(x=category, y=RSquared)) +
geom_segment( aes(x=category, xend=category, y=0, yend=RSquared), color="skyblue") +
geom_point( color="blue", size=4, alpha=0.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
Results_Models <- data.frame(
category=c("Sub-meter1 / Kitchen", "Sub-meter2 / Laundry", "Sub-meter 3 / WaterHeater & AC"),
RMSE = c(sqrt(mean(fitSM1$residuals^2)), sqrt(mean(fitSM2$residuals^2)), sqrt(mean(fitSM3$residuals^2))),
RSquared=c(summary(fitSM1)$r.squared, summary(fitSM2)$r.squared, summary(fitSM3)$r.squared)
)
Results_Models
# Horizontal version
ggplot(Results_Models, aes(x=category, y=RMSE)) +
geom_segment( aes(x=category, xend=category, y=4, yend=RMSE), color="skyblue") +
geom_point( color="blue", size=4, alpha=0.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
ggplot(Results_Models, aes(x=category, y=RSquared)) +
geom_segment( aes(x=category, xend=category, y=0, yend=RSquared), color="skyblue") +
geom_point( color="blue", size=4, alpha=0.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
Results_Models <- data.frame(
category=c("Sub-meter1 / Kitchen", "Sub-meter2 / Laundry", "Sub-meter3 / WaterHeater & AC"),
RMSE = c(sqrt(mean(fitSM1$residuals^2)), sqrt(mean(fitSM2$residuals^2)), sqrt(mean(fitSM3$residuals^2))),
RSquared=c(summary(fitSM1)$r.squared, summary(fitSM2)$r.squared, summary(fitSM3)$r.squared)
)
Results_Models
# Horizontal version
ggplot(Results_Models, aes(x=category, y=RMSE)) +
geom_segment( aes(x=category, xend=category, y=4, yend=RMSE), color="skyblue") +
geom_point( color="blue", size=4, alpha=0.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
ggplot(Results_Models, aes(x=category, y=RSquared)) +
geom_segment( aes(x=category, xend=category, y=0, yend=RSquared), color="skyblue") +
geom_point( color="blue", size=4, alpha=0.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
df<-read.csv('household_power_consumption.csv')
df
df <- cbind(df,DateTime = paste(df$Date,df$Time), stringsAsFactors=FALSE)
df <- df %>%
select(X, DateTime, Sub_metering_1, Sub_metering_2, Sub_metering_3)
df$DateTime <- as.POSIXct(df$DateTime, "%Y/%m/%d %H:%M:%S")
df$quarter <- quarter(df$DateTime)
df$month <- month(df$DateTime)
df$week <- isoweek(df$DateTime)
#In order to show week days in English instead of Portuguese (my original locale in RStudio) I will run the following command:
Sys.setlocale("LC_TIME", "English")
df$weekdays <- weekdays(df$DateTime)
df$day <- day(df$DateTime)
df$hour <- hour(df$DateTime)
df$minute <- minute(df$DateTime)
attr(df$DateTime, "tzone") <- "Europe/Paris"
df
house070809weekly <- filter(df, weekdays == 'Monday' & hour == 20 & minute == 1)
tsSM3_070809weekly <- ts(house070809weekly$Sub_metering_3, frequency=52, start=c(2007,1))
autoplot(tsSM3_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 3 / Water Heater & AC")
plot.ts(tsSM3_070809weekly)
house070809daily <- filter(df, hour == 15 & minute == 1)
tsSM2_070809daily <- ts(house070809daily$Sub_metering_2, frequency=365, start=c(2007,1))
autoplot(tsSM2_070809daily, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 2 / Laundry")
plot.ts(tsSM2_070809daily)
house070809daily <- filter(df, hour == 12 & minute == 1)
tsSM1_070809daily <- ts(house070809daily$Sub_metering_1, frequency=365, start=c(2007,1))
autoplot(tsSM1_070809daily, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 1 / Kitchen")
plot.ts(tsSM1_070809daily)
fitSM3 <- tslm(tsSM3_070809weekly ~ trend + season)
summary(fitSM3)
forecastfitSM3 <- forecast(fitSM3, h=20)
plot(forecastfitSM3)
forecastfitSM3c <- forecast(fitSM3, h=20, level=c(80,90))
plot(forecastfitSM3c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
fitSM2 <- tslm(tsSM2_070809daily ~ trend + season)
summary(fitSM2)
forecastfitSM2 <- forecast(fitSM2, h=50)
plot(forecastfitSM2)
forecastfitSM2c <- forecast(fitSM2, h=50, level=c(80,90))
plot(forecastfitSM2c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
fitSM1 <- tslm(tsSM1_070809daily ~ trend + season)
summary(fitSM1)
forecastfitSM1 <- forecast(fitSM1, h=50)
plot(forecastfitSM1)
forecastfitSM1c <- forecast(fitSM1, h=50, level=c(80,90))
plot(forecastfitSM1c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
Results_Models <- data.frame(
category=c("Sub-meter1 / Kitchen", "Sub-meter2 / Laundry", "Sub-meter3 / WaterHeater & AC"),
RMSE = c(sqrt(mean(fitSM1$residuals^2)), sqrt(mean(fitSM2$residuals^2)), sqrt(mean(fitSM3$residuals^2))),
RSquared=c(summary(fitSM1)$r.squared, summary(fitSM2)$r.squared, summary(fitSM3)$r.squared)
)
Results_Models
# Horizontal version
ggplot(Results_Models, aes(x=category, y=RMSE)) +
geom_segment( aes(x=category, xend=category, y=4, yend=RMSE), color="skyblue") +
geom_point( color="blue", size=4, alpha=0.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
ggplot(Results_Models, aes(x=category, y=RSquared)) +
geom_segment( aes(x=category, xend=category, y=0, yend=RSquared), color="skyblue") +
geom_point( color="blue", size=4, alpha=0.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
components070809SM3weekly <- decompose(tsSM3_070809weekly)
## Plot decomposed sub-meter 3
plot(components070809SM3weekly)
## Check summary statistics for decomposed sub-meter 3
summary(components070809SM3weekly)
par(mfrow=c(3,1))
plot(components070809SM1daily$trend, type ='l',col="red")
components070809SM3weekly <- decompose(tsSM3_070809weekly)
## Plot decomposed sub-meter 3
plot(components070809SM3weekly)
## Check summary statistics for decomposed sub-meter 3
summary(components070809SM3weekly)
components070809SM2daily <- decompose(tsSM2_070809daily)
## Plot decomposed sub-meter 2
plot(components070809SM2daily)
## Check summary statistics for decomposed sub-meter 2
summary(components070809SM2daily)
components070809SM1daily <- decompose(tsSM1_070809daily)
## Plot decomposed sub-meter 1
plot(components070809SM1daily)
## Check summary statistics for decomposed sub-meter 1
summary(components070809SM1daily)
par(mfrow=c(3,1))
plot(components070809SM1daily$trend, type ='l',col="red")
plot(components070809SM2daily$trend, type ='l',col="green")
plot(components070809SM3weekly$trend, type ='l',col="blue")
tsSM3_HW070809 <- HoltWinters(tsSM3_070809Adjusted, beta=FALSE, gamma=FALSE)
tsSM3_070809Adjusted <- tsSM3_070809weekly - components070809SM3weekly$seasonal
autoplot(tsSM3_070809Adjusted)
plot(decompose(tsSM3_070809Adjusted))
tsSM2_070809Adjusted <- tsSM2_070809daily - components070809SM2daily$seasonal
autoplot(tsSM2_070809Adjusted)
plot(decompose(tsSM2_070809Adjusted))
tsSM1_070809Adjusted <- tsSM1_070809daily - components070809SM1daily$seasonal
autoplot(tsSM1_070809Adjusted)
plot(decompose(tsSM1_070809Adjusted))
tsSM3_HW070809 <- HoltWinters(tsSM3_070809Adjusted, beta=FALSE, gamma=FALSE)
plot(tsSM3_HW070809, ylim = c(0, 25))
tsSM2_HW070809 <- HoltWinters(tsSM2_070809Adjusted, beta=FALSE, gamma=FALSE)
plot(tsSM2_HW070809, ylim = c(0, 30))
tsSM1_HW070809 <- HoltWinters(tsSM1_070809Adjusted, beta=FALSE, gamma=FALSE)
plot(tsSM1_HW070809, ylim = c(0, 25))
tsSM3_HW070809for <- forecast(tsSM3_HW070809, h=25)
plot(tsSM3_HW070809for, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time - Sub-meter 3")
tsSM2_HW070809for <- forecast(tsSM2_HW070809, h=50)
plot(tsSM2_HW070809for, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time - Sub-meter 2")
tsSM2_HW070809forC <- forecast(tsSM2_HW070809, h=50, level=c(10,25))
plot(tsSM2_HW070809forC, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time - Sub-meter 2", start(2010))
tsSM1_HW070809for <- forecast(tsSM1_HW070809, h=50)
plot(tsSM1_HW070809for, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time - Sub-meter 1")
tsSM1_HW070809forC <- forecast(tsSM1_HW070809, h=50, level=c(10,25))
plot(tsSM1_HW070809forC, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time - Sub-meter 1", start(2010))
df_train<-read.csv('.\UJIndoorLoc\trainingData.csv')
df_train<-read.csv('..\UJIndoorLoc\trainingData.csv')
df_train<-read.csv('../UJIndoorLoc/trainingData.csv')
df_train
df_train<-read.csv('./UJIndoorLoc/trainingData.csv')
df_train<-read.csv('./UJIndoorLoc/trainingData.csv')
df_train
df_train<-read.csv('./UJIndoorLoc/trainingData.csv')
df_train
df_validation<-read.csv('./UJIndoorLoc/validationData.csv')
df_validation
str(df_train)
summary(df_train)
head(df_train[order(df_train$Date),]) #order applied in case data didn't come ordered from database
str(df_train)
sapply(df_train, class)
sapply(df_train, class).table()
sapply(df_train, class).table
table(sapply(df_train, class))
sapply(df_train, class)
table(sapply(df_train, class))
as.POSIXct(strptime(df_train$TIMESTAMP, "%a %b %d %H:%M:%S %z %Y"))
as.POSIXct(strptime(df_train$TIMESTAMP, origin="1970-01-01"))
as.POSIXct(strptime(df_train$TIMESTAMP), origin="1970-01-01")
as.POSIXct((df_train$TIMESTAMP), origin="1970-01-01")
as.POSIXct((df_train$TIMESTAMP))
as.POSIXct((df_train$TIMESTAMP), origin="1970-01-01")
df_train$DateTime <- as.POSIXct((df_train$TIMESTAMP), origin="1970-01-01") #Default origin time
df_train
df_train
any(is.na(df_train))
any(is.na(df_train))
any(is.na(df_validation))
table(sapply(df_train, class))
df_train<-read.csv('./UJIndoorLoc/trainingData.csv')
df_train
df_validation<-read.csv('./UJIndoorLoc/validationData.csv')
df_validation
table(sapply(df_train, class))
table(sapply(df_validation, class))
df_train$DateTime <- as.POSIXct((df_train$TIMESTAMP), origin="1970-01-01") #Default origin time
df_validation$DateTime <- as.POSIXct((df_validation$TIMESTAMP), origin="1970-01-01") #Default origin time
any(is.na(df_train))
any(is.na(df_validation))
rownames(df_train)
names(df_train)
names(df_train) %>% select(starts_with("WAP"))
names(df_train %>% select(starts_with("WAP")))
count(names(df_train %>% select(starts_with("WAP"))))
table(names(df_train %>% select(starts_with("WAP"))))
sum(names(df_train %>% select(starts_with("WAP"))))
len(names(df_train %>% select(starts_with("WAP"))))
length(names(df_train %>% select(starts_with("WAP"))))
length(names(df_train %>% select(!starts_with("WAP"))))
names(df_train %>% select(!starts_with("WAP")))
length(names(df_train %>% select(starts_with("WAP"))))
names(df_train %>% select(!starts_with("WAP")))
length(names(df_train %>% select(starts_with("WAP"))))
names(df_train %>% select(!starts_with("WAP")))
length(names(df_validation %>% select(starts_with("WAP"))))
names(df_validation %>% select(!starts_with("WAP")))
df_train<-read.csv('./UJIndoorLoc/trainingData.csv')
df_train
df_validation<-read.csv('./UJIndoorLoc/validationData.csv')
df_validation
