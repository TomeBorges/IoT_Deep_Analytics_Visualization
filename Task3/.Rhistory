bwplot(results)
col_index <- varImp(gbmfit_BID)$importance %>%
mutate(names=row.names(.)) %>%
arrange(-Overall)
imp_names <- col_index$names[1:250]
df_train_BID_final <- cbind(df_train_BID[,imp_names],
BUILDINGID = df_train_BID$BUILDINGID)
final_fit_BID <- train(BUILDINGID~., #y/target
data = df_train_BID_final, #X/features
metric = 'Kappa', #Metric applied
method = "gbm", #ML algorithm
trControl=gbmfitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated
verbose = FALSE)
results <- resamples(list(SVM_Model=svmfit_BID, GBM_Model=gbmfit_BID, RF_Model=rffit_BID, BestModel = final_fit_BID))
summary(results)
bwplot(results)
BID_pred_final <- predict(final_fit_BID, newdata = df_train)
confusionMatrix(data = BID_pred_final,
reference = factor(df_train$BUILDINGID))
Validation_BID_pred <- predict(final_fit_BID, newdata = df_validation)
Validation_BID_pred
Step1_df_validation <- cbind(df_validation %>% select(starts_with("WAP")), BUILDINGID_pred =Validation_BID_pred)
Step1_df_validation
df_train_F <- df_sample_train %>% select(starts_with("WAP"),"BUILDINGID","FLOOR")
#Perform factorization on target column:
df_train_F$FLOOR <- as.factor(as.character(df_train_F$FLOOR)) #Reconvert brand feature binary column not integer.
#df_train_F$BUILDINGID <- as.factor(as.integer(df_train_F$BUILDINGID)) #Reconvert feature into binary column not integer.
svmfit_F <- train(FLOOR~., #y/target
data = df_train_F, #X/features
method = "svmLinear", #ML algorithm
trControl=svmfitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated.
)
svmfit_F
gbmfit_F <- train(FLOOR~., #y/target
data = df_train_F, #X/features
metric = 'Kappa', #Metric applied
method = "gbm", #ML algorithm
trControl=gbmfitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated
verbose = FALSE)
gbmfit_F
rffit_F <- train(FLOOR~., #y/target
data = df_train_F, #X/features
metric = 'Kappa', #Metric applied
method = "rf", #ML algorithm
trControl=rffitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated
verbose = FALSE)
rffit_F
varImp(svmfit_F)
varImp(gbmfit_F)
varImp(rffit_F)
F_pred_SVM <- predict(svmfit_F, newdata = df_train)
confusionMatrix(data = F_pred_SVM,
reference = factor(df_train$FLOOR))
F_pred_GBM <- predict(gbmfit_F, newdata = df_train)
confusionMatrix(data = F_pred_GBM,
reference = factor(df_train$FLOOR))
F_pred_RF <- predict(rffit_F, newdata = df_train)
confusionMatrix(data = F_pred_RF,
reference = factor(df_train$FLOOR))
results <- resamples(list(SVM_Model=svmfit_F, GBM_Model=gbmfit_F, RF_Model=rffit_F))
summary(results)
bwplot(results)
col_index <- varImp(rffit_F)$importance %>%
mutate(names=row.names(.)) %>%
arrange(-Overall)
imp_names <- col_index$names[1:250]
df_train_F_final <- cbind(df_train_F[,imp_names],
FLOOR = df_train_F$FLOOR)
final_fit_F <- train(FLOOR~., #y/target
data = df_train_F_final, #X/features
metric = 'Kappa', #Metric applied
method = "gbm", #ML algorithm
trControl=rffitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated
verbose = FALSE)
results <- resamples(list(SVM_Model=svmfit_F, GBM_Model=gbmfit_F, RF_Model=rffit_F, BestModel = final_fit_BID))
summary(results)
bwplot(results)
varImp(final_fit_F)[1:250]
F_pred_final <- predict(final_fit_F, newdata = df_train)
confusionMatrix(data = F_pred_final,
reference = factor(df_train$FLOOR))
Validation_F_pred <- predict(final_fit_F, newdata = df_validation)
Validation_F_pred
Step2_df_validation <- cbind(Step1_df_validation, FLOOR_pred = Validation_F_pred)
Step2_df_validation
df_train_RP <- df_sample_train %>% select(starts_with("WAP"),"FLOOR","BUILDINGID","RELATIVEPOSITION")
#df_train_RP$BUILDINGID <- as.factor(as.character(df_train_RP$BUILDINGID)) #Reconvert feature into binary column not integer.
#df_train_F$FLOOR <- as.factor(as.character(df_train_F$FLOOR)) #Reconvert brand feature binary column not integer.
#Perform factorization on target column:
df_train_RP$RELATIVEPOSITION <- as.factor(as.character(df_train_RP$RELATIVEPOSITION)) #Reconvert feature into binary column not integer.
svmfit_RP <- train(RELATIVEPOSITION~., #y/target
data = df_train_RP, #X/features
method = "svmLinear", #ML algorithm
trControl=svmfitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated.
)
svmfit_RP
gbmfit_RP <- train(RELATIVEPOSITION~., #y/target
data = df_train_RP, #X/features
metric = 'Kappa', #Metric applied
method = "gbm", #ML algorithm
trControl=gbmfitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated
verbose = FALSE)
gbmfit_RP
rffit_RP <- train(RELATIVEPOSITION~., #y/target
data = df_train_RP, #X/features
metric = 'Kappa', #Metric applied
method = "rf", #ML algorithm
trControl=rffitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated
verbose = FALSE)
rffit_RP
varImp(svmfit_RP)
varImp(gbmfit_RP)
varImp(rffit_RP)
RP_pred_SVM <- predict(svmfit_RP, newdata = df_train)
confusionMatrix(data = RP_pred_SVM,
reference = factor(df_train$RELATIVEPOSITION))
RP_pred_GBM <- predict(gbmfit_RP, newdata = df_train)
confusionMatrix(data = RP_pred_GBM,
reference = factor(df_train$RELATIVEPOSITION))
RP_pred_RF <- predict(rffit_RP, newdata = df_train)
confusionMatrix(data = RP_pred_RF,
reference = factor(df_train$RELATIVEPOSITION))
results <- resamples(list(SVM_Model=svmfit_RP, GBM_Model=gbmfit_RP, RF_Model=rffit_RP))
summary(results)
bwplot(results)
col_index <- varImp(rffit_RP)$importance %>%
mutate(names=row.names(.)) %>%
arrange(-Overall)
imp_names <- col_index$names[1:300]
df_train_RP_final <- cbind(df_train_RP[,imp_names],
RELATIVEPOSITION = df_train_RP$RELATIVEPOSITION)
final_fit_RP <- train(RELATIVEPOSITION~., #y/target
data = df_train_RP_final, #X/features
metric = 'Kappa', #Metric applied
method = "gbm", #ML algorithm
trControl=rffitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated
verbose = FALSE)
results <- resamples(list(SVM_Model=svmfit_RP, GBM_Model=gbmfit_RP, RF_Model=rffit_RP, BestModel = final_fit_RP))
summary(results)
bwplot(results)
varImp(final_fit_RP)[1:250]
RP_pred_final <- predict(final_fit_RP, newdata = df_train)
confusionMatrix(data = RP_pred_final,
reference = factor(df_train$RELATIVEPOSITION))
Validation_RP_pred <- predict(final_fit_RP, newdata = df_validation)
Validation_RP_pred
Step3_df_validation <- cbind(Step2_df_validation, RELATIVEPOSITION_pred = Validation_RP_pred)
Step3_df_validation
df_train_LONG <- df_sample_train %>% select(starts_with("WAP"),"FLOOR","BUILDINGID","RELATIVEPOSITION","LONGITUDE")
svmfit_LONG <- train(LONGITUDE~., #y/target
data = df_train_LONG, #X/features
method = "svmLinear", #ML algorithm
trControl=svmfitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated.
)
svmfit_LONG
gbmfit_LONG <- train(LONGITUDE~., #y/target
data = df_train_LONG, #X/features
metric = 'Kappa', #Metric applied
method = "gbm", #ML algorithm
trControl=gbmfitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated
verbose = FALSE)
gbmfit_LONG <- train(LONGITUDE~., #y/target
data = df_train_LONG, #X/features
metric = 'RMSE', #Metric applied
method = "gbm", #ML algorithm
trControl=gbmfitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated
verbose = FALSE)
gbmfit_LONG
rffit_LONG <- train(LONGITUDE~., #y/target
data = df_train_LONG, #X/features
metric = 'RMSE', #Metric applied
method = "rf", #ML algorithm
trControl=rffitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated
verbose = FALSE)
rffit_LONG
varImp(svmfit_LONG)
varImp(gbmfit_LONG)
varImp(rffit_LONG)
LONG_pred_SVM <- predict(svmfit_LONG, newdata = df_train)
postResample(LONG_pred_SVM, df_train$LONGITUDE)
LONG_pred_GBM <- predict(gbmfit_LONG, newdata = df_train)
postResample(LONG_pred_GBM, df_train$LONGITUDE)
LONG_pred_RF <- predict(rffit_LONG, newdata = df_train)
postResample(LONG_pred_RF, df_train$LONGITUDE)
df_train['LATITUDE']
st_transform(4864921)
library(sf)
install.packages('sf')
library(sf)
st_transform(4864921)
library(sf)
sfc = st_sfc(st_point(c(0,0)), st_point(c(1,1)))
sfc %>% st_set_crs(4326) %>% st_transform(4864921)
df_train['LATITUDE']
df_train['LONGITUDE']
ptc = st_sfc(c(-7541.264, 4864921),crs=4326)
ptc=c(-7541.264, 4864921)
ptc
st_sfc(st_as_text(ptc),crs=4326)
sfc = st_sfc(st_point(c(0,0)), st_point(c(1,1)))
st_crs(sfc) = 4326
sfc
st_crs(sfc) = 4326
sfc = st_sfc(st_point(c(-7541.264, 4864921)), st_point(c(1,1)))
st_crs(sfc) = 4326
sfc
sfc = st_sfc(c(-7541.264, 4864921)), st_point(c(1,1)))
sfc = st_sfc(c(-7541.264, 4864921)), st_point(c(1,1))
sfc = st_sfc(st_point(c(-7541.264, 4864921))), st_point(c(1,1))
sfc = st_sfc(st_point(c(-7541.264, 4864921)), st_point(c(1,1)))
library(dplyr)
x = sfc %>% st_set_crs(4326) %>% st_transform(3857)
x
st_distance(st_point(c(-7541.264, 4864921)), st_point(c(1,1)))
line = st_sfc(st_linestring(rbind(c(-7541.264, 4864921), c(40,40))), crs = 4326)
st_length(line)
line = st_sfc(st_linestring(rbind(c(-7541.264, 4864921), c(4864888,40))), crs = 4326)
st_length(line)
line = st_sfc(st_linestring(rbind(c(-7541.264, 4864921), c(-7632.144,4864888))), crs = 4326)
st_length(line)
line = st_sfc(st_linestring(rbind(c(-7542.264, 4864921), c(-7632.144,4864888))), crs = 4326)
st_length(line)
line = st_sfc(st_linestring(rbind(c(-7542.264, 4864921), c(-7632.144,4864888))), crs = 3857)
st_length(line)
line = st_sfc(st_linestring(rbind(c(16,16), c(0,0))), crs = 3857)
st_length(line)
line = st_sfc(st_linestring(rbind(c(5,5), c(0,0))), crs = 3857)
st_length(line)
results <- resamples(list(SVM_Model=svmfit_LONG, GBM_Model=gbmfit_LONG, RF_Model=rffit_LONG))
summary(results)
bwplot(results)
col_index <- varImp(rffit_LONG)$importance %>%
mutate(names=row.names(.)) %>%
arrange(-Overall)
imp_names <- col_index$names[1:250]
df_train_LONG_final <- cbind(df_train_LONG[,imp_names],
LONGITUDE = df_train_RP$LONGITUDE)
col_index <- varImp(rffit_LONG)$importance %>%
mutate(names=row.names(.)) %>%
arrange(-Overall)
imp_names <- col_index$names[1:250]
df_train_LONG_final <- cbind(df_train_LONG[,imp_names],
LONGITUDE = df_train_LONG$LONGITUDE)
final_fit_LONG <- train(LONGITUDE~., #y/target
data = df_train_LONG_final, #X/features
metric = 'RMSE', #Metric applied
method = "rf", #ML algorithm
trControl=rffitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated
verbose = FALSE)
results <- resamples(list(SVM_Model=svmfit_LONG, GBM_Model=gbmfit_LONG, RF_Model=rffit_LONG, BestModel = final_fit_LONG))
summary(results)
bwplot(results)
varImp(final_fit_RP)[1:250]
LONG_pred_final <- predict(final_fit_LONG, newdata = df_train)
confusionMatrix(data = LONG_pred_final,
reference = factor(df_train$LONGITUDE))
postResample(LONG_pred_final, df_train$LONGITUDE)
col_index <- varImp(rffit_LONG)$importance %>%
mutate(names=row.names(.)) %>%
arrange(-Overall)
imp_names <- col_index$names[1:250]
df_train_LONG_final <- cbind(df_train_LONG[,imp_names],
LONGITUDE = df_train_LONG$LONGITUDE)
final_fit_LONG <- train(LONGITUDE~., #y/target
data = df_train_LONG_final, #X/features
metric = 'RMSE', #Metric applied
method = "rf", #ML algorithm
trControl=rffitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated
verbose = FALSE)
results <- resamples(list(SVM_Model=svmfit_LONG, GBM_Model=gbmfit_LONG, RF_Model=rffit_LONG, BestModel = final_fit_LONG))
summary(results)
bwplot(results)
varImp(final_fit_RP)[1:250]
LONG_pred_final <- predict(final_fit_LONG, newdata = df_train)
postResample(LONG_pred_final, df_train$LONGITUDE)
Validation_RP_pred <- predict(LONG_pred_final, newdata = df_validation)
varImp(final_fit_LONG)[1:250]
Validation_LONG_pred <- predict(final_fit_LONG, newdata = df_validation)
Validation_LONG_pred
Validation_LONG_pred.min()
Step4_df_validation <- cbind(Step3_df_validation, LONGITUDE_pred = Validation_LONG_pred)
Step4_df_validation
df_train_LAT <- df_sample_train %>% select(starts_with("WAP"),"FLOOR","BUILDINGID","RELATIVEPOSITION","LATITUDE")
svmfit_LAT <- train(LATITUDE~., #y/target
data = df_train_LAT, #X/features
method = "svmLinear", #ML algorithm
trControl=svmfitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated.
)
svmfit_LAT
gbmfit_LAT <- train(LATITUDE~., #y/target
data = df_train_LAT, #X/features
metric = 'RMSE', #Metric applied
method = "gbm", #ML algorithm
trControl=gbmfitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated
verbose = FALSE)
gbmfit_LAT
rffit_LAT <- train(LATITUDE~., #y/target
data = df_train_LAT, #X/features
metric = 'RMSE', #Metric applied
method = "rf", #ML algorithm
trControl=rffitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated
verbose = FALSE)
rffit_LAT
varImp(svmfit_LAT)
varImp(gbmfit_LAT)
varImp(rffit_LAT)
LAT_pred_SVM <- predict(svmfit_LAT, newdata = df_train)
postResample(LAT_pred_SVM, df_train$LATITUDE)
LAT_pred_GBM <- predict(gbmfit_LAT, newdata = df_train)
postResample(LAT_pred_GBM, df_train$LATITUDE)
LAT_pred_RF <- predict(rffit_LAT, newdata = df_train)
postResample(LAT_pred_RF, df_train$LATITUDE)
results <- resamples(list(SVM_Model=svmfit_LAT, GBM_Model=gbmfit_LAT, RF_Model=rffit_LAT))
summary(results)
bwplot(results)
col_index <- varImp(rffit_LAT)$importance %>%
mutate(names=row.names(.)) %>%
arrange(-Overall)
imp_names <- col_index$names[1:250]
df_train_LAT_final <- cbind(df_train_LAT[,imp_names],
LATITUDE = df_train_LAT$LATITUDE)
final_fit_LAT <- train(LATITUDE~., #y/target
data = df_train_LAT_final, #X/features
metric = 'RMSE', #Metric applied
method = "rf", #ML algorithm
trControl=rffitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated
verbose = FALSE)
results <- resamples(list(SVM_Model=svmfit_LAT, GBM_Model=gbmfit_LAT, RF_Model=rffit_LAT, BestModel = final_fit_LAT))
summary(results)
bwplot(results)
varImp(final_fit_LAT)[1:250]
LAT_pred_final <- predict(final_fit_LAT, newdata = df_train)
postResample(LAT_pred_final, df_train$LATITUDE)
Validation_LAT_pred <- predict(final_fit_LAT, newdata = df_validation)
Step5_df_validation <- cbind(Step4_df_validation, LATITUDE_pred = Validation_LAT_pred)
Step5_df_validation
Step4_df_validation
Step5_df_validation
hist(df_train$LONGITUDE,xlab="Longitude",main="Distribution of Longitudes")
hist(df_train$LATITUDE,xlab="Latitude",main="Distribution of Latitude")
hist(df_train$LONGITUDE,xlab="Longitude",main="Distribution of Longitudes")
hist(df_train$LATITUDE,xlab="Latitude",main="Distribution of Latitude")
hist(df_validation$LONGITUDE,xlab="Longitude",main="Distribution of Longitudes")
hist(df_validation$LATITUDE,xlab="Latitude",main="Distribution of Latitude")
hist(df_validation$LONGITUDE_pred,xlab="Longitude",main="Distribution of Longitudes")
hist(df_train$LONGITUDE,xlab="Longitude",main="Distribution of Longitudes")
hist(df_train$LATITUDE,xlab="Latitude",main="Distribution of Latitude")
hist(df_validation$LONGITUDE,xlab="Longitude",main="Distribution of Longitudes")
hist(df_validation$LATITUDE,xlab="Latitude",main="Distribution of Latitude")
hist(Step5_df_validation$LONGITUDE_pred,xlab="Longitude",main="Distribution of Longitudes")
hist(Step5_df_validation$LATITUDE_pred,xlab="Latitude",main="Distribution of Latitude")
hist(df_validation$LONGITUDE,xlab="Longitude",main="Actual Distribution of Longitudes")
hist(df_validation$LATITUDE,xlab="Latitude",main="Actual Distribution of Latitude")
hist(Step5_df_validation$LONGITUDE_pred,xlab="Longitude",main="Predicted Distribution of Longitudes")
hist(Step5_df_validation$LATITUDE_pred,xlab="Latitude",main="Predicted Distribution of Latitude")
hist(df_validation$FLOOR,xlab="Longitude",main="Actual Distribution of Longitudes")
hist(df_validation$LATITUDE,xlab="Latitude",main="Actual Distribution of Latitude")
hist(Step5_df_validation$FLOOR_pred,xlab="Longitude",main="Predicted Distribution of Longitudes")
hist(as.numeric(Step5_df_validation$FLOOR_pred),xlab="Longitude",main="Predicted Distribution of Longitudes")
hist(df_validation$FLOOR,xlab="Longitude",main="Actual Distribution of Longitudes")
hist(df_validation$LATITUDE,xlab="Latitude",main="Actual Distribution of Latitude")
hist(as.numeric(Step5_df_validation$FLOOR_pred),xlab="Longitude",main="Predicted Distribution of Longitudes")
hist(Step5_df_validation$LATITUDE_pred,xlab="Latitude",main="Predicted Distribution of Latitude")
hist(df_validation$BUILDINGID,xlab="BuildingID",main="Actual Distribution of BuildingID")
hist(df_validation$FLOOR,xlab="Floor",main="Actual Distribution of Floor")
hist(df_validation$RELATIVEPOSITION,xlab="RelativePosition",main="Actual Distribution of RelativePosition")
hist(as.numeric(Step5_df_validation$BUILDINGID_pred),xlab="BuildingID",main="Predicted Distribution of BuildingID")
hist(as.numeric(Step5_df_validation$FLOOR_pred),xlab="Floor",main="Predicted Distribution of Floor")
hist(as.numeric(Step5_df_validation$RELATIVEPOSITION_pred),xlab="RelativePosition",main="Predicted Distribution of RelativePosition")
Step5_df_validation
Step5_df_validation['LATITUDE]
Step5_df_validation['LATITUDE']
Step5_df_validation['LATITUDE']
Step5_df_validation['LATITUDE_Pred']
Step5_df_validation['LATITUDE_pred']
line = st_sfc(st_linestring(rbind(c(5,5), c(Step5_df_validation['LATITUDE_pred'],Step5_df_validation['LONGITUDE_pred']))), crs = 3857)
library(sf)
line = st_sfc(st_linestring(rbind(c(df_train['LATITUDE'],df_train['LONGITUDE']),
c(Step5_df_validation['LATITUDE_pred'],Step5_df_validation['LONGITUDE_pred']))), crs = 3857)
df_train['LATITUDE']
as.numeric(df_train['LATITUDE'])
as.numeric(df_train['LATITUDE'])
df_train['LATITUDE']
c(Step5_df_validation['LATITUDE_pred'],Step5_df_validation['LONGITUDE_pred'])
rbind(c(df_train['LATITUDE'],df_train['LONGITUDE']),                 c(Step5_df_validation['LATITUDE_pred'],Step5_df_validation['LONGITUDE_pred'])
rbind(c(df_train['LATITUDE'],df_train['LONGITUDE']),
c(Step5_df_validation['LATITUDE_pred'],Step5_df_validation['LONGITUDE_pred'])
rbind(c(df_train['LATITUDE'],df_train['LONGITUDE']),
c(Step5_df_validation['LATITUDE_pred'],Step5_df_validation['LONGITUDE_pred'])
rbind(c(df_train['LATITUDE'],df_train['LONGITUDE']),
c(Step5_df_validation['LATITUDE_pred'],Step5_df_validation['LONGITUDE_pred']))
library(sf)
line = st_sfc(st_linestring(rbind(c(0,0),
c(1,1))), crs = 3857)
st_length(line)
rbind(c(0,0),
c(1,1))
st_linestring(rbind(c(df_train['LATITUDE'],df_train['LONGITUDE']),
c(Step5_df_validation['LATITUDE_pred'],Step5_df_validation['LONGITUDE_pred'])))
rbind(c(df_train['LATITUDE'],df_train['LONGITUDE']),
c(Step5_df_validation['LATITUDE_pred'],Step5_df_validation['LONGITUDE_pred']))
st_distance(c(0,0), c(1,1)))
st_distance(df_train['LATITUDE'], df_train['LATITUDE'])
results <- resamples(list(BuildingID_Model=final_fit_BID,
Floor_Model = final_fit_F,
RelativePosition_Model = final_fit_RP))
summary(results)
bwplot(results)
results <- resamples(list(BuildingID_Model=final_fit_BID,
Floor_Model = final_fit_F,
RelativePosition_Model = final_fit_RP,
Latitude_Model = final_fit_LAT))
results <- resamples(list(Latitude_Model = final_fit_LAT,
Longitude_Model = final_fit_LONG))
summary(results)
bwplot(results)
results <- resamples(list(BuildingID_Model=final_fit_BID,
Floor_Model = final_fit_F,
RelativePosition_Model = final_fit_RP))
summary(results)
bwplot(results)
c(NA,
sapply(seq.int(2,nrow(df_validation)), function(i){
distm(c(df_validation$LONGITUDE[i],df_validation$LATITUDE[i]),
c(Step5_df_validation$LONGITUDE_pred[i], Step5_df_validation$LATITUDE_pred[i]),
fun = distHaversine)
})
)
library(geosphere)
install.packages('geosphere')
library(geosphere)
c(NA,
sapply(seq.int(2,nrow(df_validation)), function(i){
distm(c(df_validation$LONGITUDE[i],df_validation$LATITUDE[i]),
c(Step5_df_validation$LONGITUDE_pred[i], Step5_df_validation$LATITUDE_pred[i]),
fun = distHaversine)
})
)
line = st_sfc(st_linestring(rbind(c(0,0),
c(1,))), crs = 3857)
line = st_sfc(st_linestring(rbind(c(0,0),
c(1,0))), crs = 3857)
st_length(line)
line = st_sfc(st_linestring(rbind(c(0,0),
c(1000,0))), crs = 3857)
st_length(line)
Step5_df_validation%>% select(ends_with("pred"))
write.csv(Step5_df_validation%>% select(ends_with("pred")),"\RawPredictions.csv", row.names = FALSE)
write.csv(Step5_df_validation%>% select(ends_with("pred")),"RawPredictions.csv", row.names = FALSE)
Step5_df_validation%>% select(ends_with("pred")
Step5_df_validation%>% select(ends_with("pred"))
Step5_df_validation%>% select(ends_with("pred"))
Step5_df_validation%>% select(ends_with("pred"))
write.csv(Step5_df_validation%>% select("BUILDINGID","BUILDINGID_pred",
"FLOOR","FLOOR_pred",
"RELATIVEPOSITION","RELATIVEPOSITION_pred",
"LONGITUDE","LONGITUDE_pred",
"LATITUDE","LATITUDE_pred")
,"RawPredictions.csv", row.names = FALSE)
Step5_df_validation
#Step5_df_validation%>% select(ends_with("pred"))
write.csv(Step5_df_validation%>% select("BUILDINGID_pred",
"FLOOR_pred",
"RELATIVEPOSITION_pred",
"LONGITUDE_pred",
"LATITUDE_pred")
,"RawPredictions.csv", row.names = TRUE)
results <- resamples(list(SVM_Model=svmfit_F, GBM_Model=gbmfit_F, RF_Model=rffit_F, BestModel = final_fit_F))
summary(results)
bwplot(results)
results <- resamples(list(SVM_Model=svmfit_F, GBM_Model=gbmfit_F, RF_Model=rffit_F, BestModel = final_fit_F))
summary(results)
bwplot(results)
varImp(final_fit_F)[1:250]
F_pred_final <- predict(final_fit_F, newdata = df_train)
confusionMatrix(data = F_pred_final,
reference = factor(df_train$FLOOR))
col_index <- varImp(rffit_F)$importance %>%
mutate(names=row.names(.)) %>%
arrange(-Overall)
imp_names <- col_index$names[1:250]
df_train_F_final <- cbind(df_train_F[,imp_names],
FLOOR = df_train_F$FLOOR)
final_fit_F <- train(FLOOR~., #y/target
data = df_train_F_final, #X/features
metric = 'Kappa', #Metric applied
method = "gbm", #ML algorithm
trControl=rffitControl, #Apply CV to the training
tuneLength = 2, # Number of levels for each tuning parameters that should be generated
verbose = FALSE)
results <- resamples(list(SVM_Model=svmfit_F, GBM_Model=gbmfit_F, RF_Model=rffit_F, BestModel = final_fit_F))
summary(results)
bwplot(results)
